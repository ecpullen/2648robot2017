// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2648.robot2017;

import org.usfirst.frc2648.robot2017.commands.ArcadeDrive;
import org.usfirst.frc2648.robot2017.commands.AutonomousCommand;
import org.usfirst.frc2648.robot2017.commands.ClimberOff;
import org.usfirst.frc2648.robot2017.commands.ClimberOn;
import org.usfirst.frc2648.robot2017.commands.FeedShooter;
import org.usfirst.frc2648.robot2017.commands.GearIn;
import org.usfirst.frc2648.robot2017.commands.GearOut;
import org.usfirst.frc2648.robot2017.commands.IntakeDown;
import org.usfirst.frc2648.robot2017.commands.IntakeIn;
import org.usfirst.frc2648.robot2017.commands.IntakeOut;
import org.usfirst.frc2648.robot2017.commands.IntakeStop;
import org.usfirst.frc2648.robot2017.commands.IntakeUp;
import org.usfirst.frc2648.robot2017.commands.LockON;
import org.usfirst.frc2648.robot2017.commands.ShooterOn;
import org.usfirst.frc2648.robot2017.commands.ShooterOnClose;
import org.usfirst.frc2648.robot2017.commands.ShooterStop;
import org.usfirst.frc2648.robot2017.commands.ToggleIntake;

import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	private XboxController j1;
	private XboxController j2;
	private Button toggleIntake, shooterOnClose, intakeIn, climberOn;
    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS



        // SmartDashboard Buttons
        SmartDashboard.putData("ToggleIntake", new ToggleIntake());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("GearOut", new GearOut());
        SmartDashboard.putData("GearIn", new GearIn());
        SmartDashboard.putData("IntakeUp", new IntakeUp());
        SmartDashboard.putData("IntakeDown", new IntakeDown());
        SmartDashboard.putData("ArcadeDrive", new ArcadeDrive());
        SmartDashboard.putData("IntakeIn", new IntakeIn());
        SmartDashboard.putData("IntakeOut", new IntakeOut());
        SmartDashboard.putData("ShooterOn", new ShooterOn());
        SmartDashboard.putData("IntakeStop", new IntakeStop());
        SmartDashboard.putData("ShooterStop", new ShooterStop());
        SmartDashboard.putData("ClimberOn", new ClimberOn());
        SmartDashboard.putData("ClimberOff", new ClimberOff());
        SmartDashboard.putData("LockON", new LockON());
        SmartDashboard.putData("FeedShooter", new FeedShooter());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        j1 = new XboxController(0);
        j2 = new XboxController(1);
        
        shooterOnClose = new JoystickButton(j1, 1);
        intakeIn = new JoystickButton(j1, 8);
        toggleIntake = new JoystickButton(j1, 10);
        climberOn = new JoystickButton(j1,12);
        
        shooterOnClose.whileHeld(new ShooterOnClose());
        intakeIn.whileHeld(new IntakeIn());
        toggleIntake.whenPressed(new ToggleIntake());
        climberOn.whileHeld(new ClimberOn());
        
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public XboxController getj1(){
    	return j1;
    }
}

